name: tasks
on:
  push:
    branches:
      - 'feature/**'
      - 'codex/**'
      - develop
      - master
    paths:
      - tasks/**
      - api-lib/**
  workflow_dispatch: # Allows deployment to be invoked manually through the GitHub Actions user interface.

env:
  NAME: tasks
  DIRECTORY: tasks
  VERSION: ${{ github.sha }}
  REGISTRY_UN: ${{ vars.REGISTRY_UN }}
  REGISTRY_PW: ${{ secrets.REGISTRY_PW }}
  CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}

jobs:
  test:
    if: startsWith(github.ref_name, 'feature/') || github.ref_name == 'develop'
    name: unit-test with GHA postgres
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true # workflow wont stop job if matrix job fails must be true if kubernetes job included
      matrix:
        python-version: ["3.13"] # runs workflow for each python version
    services:
      rabbit:
        image: rabbitmq:3.12.4-management
        ports:
          - "5672:5672"
          - "15672:15672"
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        options: >-
          --health-cmd "rabbitmqctl status" 
          --health-interval 10s  
          --health-retries 5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" 
          --health-interval 30s 
          --health-timeout 5s
          --health-retries 3 
          --health-start-period 10s

      postgres:
        image: postgres:17
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 30s
          --health-timeout 5s 
          --health-retries 3
          --health-start-period 10s

    env:
      RABBIT: amqp://test:test@rabbit:5672
      REDIS_URL: redis://redis:6379/0
      POSTGRES_URL: postgresql://postgres:postgres@postgres:5432/postgres
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build and install api-lib
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          cd api-lib
          poetry build
          poetry config virtualenvs.create false
          poetry install --no-dev
          # cd ..
          # Install the local api-lib first so tasks can import it
          # python -m pip install ./api-lib

      - name: install python dependencies
        run: |
          cd $DIRECTORY
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install .[test]

      - name: unit-tests
        run: |
          cd $DIRECTORY
          pytest